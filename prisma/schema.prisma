
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  userName      String
  firstName     String?         @default("BRAK DANYCH")
  lastName      String?         @default("BRAK DANYCH")
  picture       Bytes?
  age           DateTime?
  sex           String?         @default("Mężczyzna")
  buildingName  String?         @default("DOM STUDENTA 2 - BLIZNIAK")
  description   String?         @default("Podaj opis użytkownika...")
  email         String          @unique
  password      String?
  createdAt     DateTime        @default(now())
  rooms         RoomsUsers[]
  isConfigured  Boolean         @default(false)
  roomsCreated  Room[]
  items         Item[]
  userInKitchen UserInKitchen[]
  boards        Board[]
  friends       Friendship[]    @relation("UserFriends")
  friendOf      Friendship[]    @relation("UserFriendOf")
}



model Room {
  id             Int        @id @default(autoincrement())
  idUserCreated  Int       
  name           String
  slots          Int
  useSlots       Int        @default(0)
  status         Boolean    @default(true)
  cost           Float?     @default(0.0)
  time           DateTime
  createdAt      DateTime   @default(now())
  category       String?
  type           String?
  dishimage      Int?
  UserCreated    User       @relation(fields: [idUserCreated], references: [id])
  users          RoomsUsers[]

}

model RoomsUsers {
  idUser  Int
  idRoom  Int

  user    User    @relation(fields: [idUser], references: [id])
  room    Room    @relation(fields: [idRoom], references: [id])

  @@id([idUser, idRoom])
}

model Item {
  id             Int        @id @default(autoincrement())
  idUser         Int 
  name           String
  cost           Float
  status         Boolean?    @default(true)
  expiryDate     DateTime
  createdAt      DateTime    @default(now())
  user           User        @relation(fields: [idUser], references: [id])
}

model Kitchen {
  id             Int      @id @default(autoincrement())
  slots          Int
  floor          Int
  buildingName   String
  userInKitchen  UserInKitchen[]
}

model UserInKitchen {
  id             Int      @id @default(autoincrement())
  idUser         Int
  idKitchen      Int
  dateToEnd      DateTime
  user           User     @relation(fields: [idUser], references: [id])
  kitchen        Kitchen  @relation(fields: [idKitchen], references: [id])
  
  @@unique([idUser, idKitchen])
}


model Board {
  id             Int        @id @default(autoincrement())
  message        String
  createdAt      DateTime   @default(now())
  userId         Int
  user           User       @relation(fields: [userId], references: [id])
}


model Friendship {
  id       Int    @id @default(autoincrement())
  userId   Int
  friendId Int

  user     User   @relation("UserFriends", fields: [userId], references: [id])
  friend   User   @relation("UserFriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}